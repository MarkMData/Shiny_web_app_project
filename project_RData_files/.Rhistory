return(X)
}
z <- c(8, 3, 5)
tp(z, 4, 2)
library(tidyverse)
bspline <- function(x, d = 1){
tp <- function(x, x0, r = 2){
X <- c()
for (i in 1:length(x))
if (x[i] < x0)
X[i] <- 0
else
X[i] <- (x[i] - x0) ^ r
return(X)
}
return(1/(2 * d ^ 2) *
(tp(x, 0) -
3 * tp(x, d) +
3 * tp(x, (2 * d)) -
tp(x, (3 * d))))
}
n <- seq(-1, 4, length.out = 250)
z <- tibble(x = n, B1x = bspline(n))
ggplot(z) +
geom_line(aes(x = x, y = B1x)) +
labs(x = "x", y = expression("B"[1]*"(x)")) +
theme(axis.text.y = element_text(angle = 90, hjust = 0.5))
bspline <- function(x, d = 1){
tp <- function(x, x0, r = 2){
X <- c()
for (i in 1:length(x))
if (x[i] < x0)
X[i] <- 0
else
X[i] <- (x[i] - x0) ^ r
return(X)
}
return(1/(2 * d ^ 2) *
(tp(x, 0) -
3 * tp(x, d) +
3 * tp(x, (2 * d)) -
tp(x, (3 * d))))
}
n <- seq(-1, 4, length.out = 250)
z <- tibble(x = n, B1x = bspline(n))
ggplot(z) +
geom_line(aes(x = x, y = B1x)) +
labs(x = "x", y = expression("B"[1]*"(x)")) +
theme_classic() +
theme(axis.text.y = element_text(angle = 90, hjust = 0.5), panel.border = element_rect(fill = NA))
bspline <- function(x, d = 1){
tp <- function(x, x0, r = 2){      # tp function from task 4 with r = 2
X <- c()
for (i in 1:length(x))
if (x[i] < x0)
X[i] <- 0
else
X[i] <- (x[i] - x0) ^ r
return(X)
}
return(1/(2 * d ^ 2) *            # Generating value for bspline function using tp function
(tp(x, 0) -
3 * tp(x, d) +
3 * tp(x, (2 * d)) -
tp(x, (3 * d))))
}
n <- seq(-1, 4, length.out = 250)
z <- tibble(x = n, B1x = bspline(n))    # Creating tibble so that we can plot the data
ggplot(z) +
geom_line(aes(x = x, y = B1x)) +
labs(x = "x", y = expression("B"[1]*"(x)")) +
theme_classic() +
theme(axis.text.y = element_text(angle = 90, hjust = 0.5), panel.border = element_rect(fill = NA))
projection <- function(x, k){                 # Creating projection function
k <- as.integer(round(k, digits = 0))
delta <- (max(x) - min(x)) / (k - 2)
t <- seq(min(x) - 2 * delta, max(x) - delta, length.out = k)
Z <- matrix(nrow = length(x), ncol = k)     # Creating empty matrix Z
bspline <- function(x, d = delta){          # using bspline function from task 5 with d set to delta
tp <- function(x, x0, r = 2){
X <- c()
for (i in 1:length(x))
if (x[i] < x0)
X[i] <- 0
else
X[i] <- (x[i] - x0) ^ r
return(X)
}
return(1/(2 * d ^ 2) *
(tp(x, 0) -
3 * tp(x, d) +
3 * tp(x, (2 * d)) -
tp(x, (3 * d))))
}
for (i in 1 : length(x)){        # Using for loops to fill in values of Z
for (j in 1 : k)
Z[i, j] <- bspline(x[i] - t[j])
}
P <- Z %*% solve(t(Z) %*% Z) %*% t(Z) # Creating matrix P from Z
P_list <- list(x = x, delta = delta, Z = Z, P = P) # Generating output for projection function
class(P_list) <- "projection"                # Setting object P_list as class projection
P_list
}
plot.projection <- function(x, y){    # Creating plot method for projection class
Py <- x$P %*% y
require(ggplot2)
data <- data.frame(x = x$x, y = y, Py = Py)
ggplot(data) +
geom_point(aes(x = x, y = y), shape = 1) +
geom_line(aes(x = x, y = Py)) +
labs(x = "times", y = "accel") +
scale_x_continuous(breaks = seq(10 , 50, 10)) +
theme_classic() +
theme(axis.text.y = element_text(angle = 90, hjust = 0.5), panel.border = element_rect(fill = NA))
}
library(MASS)
l <- projection(mcycle$times, 12)
plot(l, mcycle$accel )
return(pi * r ^ 2 * h)
vol.cyl <- function(r, h){
return(pi * r ^ 2 * h)
}
vol.cyl(0.5, 2)
unused.volume <- function(r, h, n){
total_cyl_vol <- pi * r ^ 2 * h * n
box_vol <- (2 * r) ^ 2 * h * n
return(box_vol - total_cyl_vol)
}
unused.volume(.5, 2, 1)
load(url("https://github.com/UofGAnalyticsData/R/raw/main/Assignment%203/img.RData"))
denoise <- function(I, d){
if (d %% 2 == 0){
stop("Please ensure that value for d is an odd number")
}
if (nrow(I) < d){
stop("The number of rows of matrix I must be greater than the value for d")
}
if (ncol(I) < d){
stop("The number of columns in matrix I must be greater than the value for d")
}
J <- matrix(nrow = nrow(I) - (d - 1), ncol = ncol(I) - (d - 1))       # Create empty matrix
for (i in 1:nrow(J)){                              # loop through matrix I and add entries to J using formula
for (j in 1:ncol(J))
J[i, j] <- median(I[i:(i+d-1), j:(j+d-1)])
}
return(J)
}
image(denoise(img, d=5), col=grey(seq(0, 1, len=256)))
pascal <- function(x){
k <- vector(mode = "list", length = x)    # Create empty list k of length same length as x
k[[1]] <- 1                               # Set first entry in k to 1
for (i in 2:x){                           # Add entries to k using recursive formula
k[[i]] <- c(0, k[[i-1]]) + c(k[[i-1]],0)
}
return(k)
}
pascal(3)
tp <- function(x, x0, r){
X <- c()
for (i in 1:length(x))     # Loop through elements of x
if (x[i] < x0)           # If any elements in x are less than x0, set to zero
X[i] <- 0
else                    # If elements in x are greater than x0, set to value based on formula
X[i] <- (x[i] - x0) ^ r
return(X)
}
z <- c(8, 3, 5)
tp(z, 4, 2)
library(tidyverse)
bspline <- function(x, d = 1){       # creating bspline function, value for d set to 1 as default
tp <- function(x, x0, r = 2){      # tp function from task 4 with r = 2
X <- c()
for (i in 1:length(x))
if (x[i] < x0)
X[i] <- 0
else
X[i] <- (x[i] - x0) ^ r
return(X)
}
return(1/(2 * d ^ 2) *            # Generating value for bspline function using tp function
(tp(x, 0) -
3 * tp(x, d) +
3 * tp(x, (2 * d)) -
tp(x, (3 * d))))
}
n <- seq(-1, 4, length.out = 250)
z <- tibble(x = n, B1x = bspline(n))    # Creating tibble so that we can plot the data
ggplot(z) +
geom_line(aes(x = x, y = B1x)) +
labs(x = "x", y = expression("B"[1]*"(x)")) +
theme_classic() +
theme(axis.text.y = element_text(angle = 90, hjust = 0.5), panel.border = element_rect(fill = NA))
# Part a.
library(tidyverse)
projection <- function(x, k){                 # Creating projection function
k <- as.integer(round(k, digits = 0))
delta <- (max(x) - min(x)) / (k - 2)
t <- seq(min(x) - 2 * delta, max(x) - delta, length.out = k)
Z <- matrix(nrow = length(x), ncol = k)     # Creating empty matrix Z
bspline <- function(x, d = delta){          # using bspline function from task 5 with d set to delta
tp <- function(x, x0, r = 2){
X <- c()
for (i in 1:length(x))
if (x[i] < x0)
X[i] <- 0
else
X[i] <- (x[i] - x0) ^ r
return(X)
}
return(1/(2 * d ^ 2) *
(tp(x, 0) -
3 * tp(x, d) +
3 * tp(x, (2 * d)) -
tp(x, (3 * d))))
}
for (i in 1 : length(x)){        # Using for loops to fill in values of Z
for (j in 1 : k)
Z[i, j] <- bspline(x[i] - t[j])
}
P <- Z %*% solve(t(Z) %*% Z) %*% t(Z) # Creating matrix P from Z
P_list <- list(x = x, delta = delta, Z = Z, P = P) # Generating output for projection function
class(P_list) <- "projection"                # Setting object P_list as class projection
P_list
}
plot.projection <- function(x, y){    # Creating plot method for projection class
Py <- x$P %*% y
require(ggplot2)
data <- data.frame(x = x$x, y = y, Py = Py)
ggplot(data) +
geom_point(aes(x = x, y = y), shape = 1) +
geom_line(aes(x = x, y = Py)) +
labs(x = "times", y = "accel") +
scale_x_continuous(breaks = seq(10 , 50, 10)) +
theme_classic() +
theme(axis.text.y = element_text(angle = 90, hjust = 0.5), panel.border = element_rect(fill = NA))
}
library(MASS)
l <- projection(mcycle$times, 12)
plot(l, mcycle$accel )
load("C:/Users/markm/Downloads/t3.RData")
od <- trips %>%
filter(start_station_id%in%sf_stations$station_id,
end_station_id%in%sf_stations$station_id) %>%
group_by(start_station_id, end_station_id) %>%
summarise(ntrips=n())
library(magrittr)
od <- trips %>%
filter(start_station_id%in%sf_stations$station_id,
end_station_id%in%sf_stations$station_id) %>%
group_by(start_station_id, end_station_id) %>%
summarise(ntrips=n())
library(tidyverse)
library(magrittr)
od <- trips %>%
filter(start_station_id%in%sf_stations$station_id,
end_station_id%in%sf_stations$station_id) %>%
group_by(start_station_id, end_station_id) %>%
summarise(ntrips=n())
sf_stations <- stations %>%
filter(city=="San Francisco")
od <- trips %>%
filter(start_station_id%in%sf_stations$station_id,
end_station_id%in%sf_stations$station_id) %>%
group_by(start_station_id, end_station_id) %>%
summarise(ntrips=n())
View(od)
odm <- od %>%
spread(end_station_id, ntrips, fill=0)
View(odm)
ggplot() +
geom_point(data=sf_stations, aes(long, lat, size=dockcount)) +
geom_segment(data=odall, aes(long, lat, xend=long_end,
yend=lat_end, alpha=ntrips))
odall <- od %>%
inner_join(sf_stations, by=c("start_station_id"="station_id")) %>%
inner_join(sf_stations, by=c("end_station_id"="station_id"),
suffix=c("","_end"))
ggplot() +
geom_point(data=sf_stations, aes(long, lat, size=dockcount)) +
geom_segment(data=odall, aes(long, lat, xend=long_end,
yend=lat_end, alpha=ntrips))
View(odall)
View(odm)
View(sf_stations)
View(odall)
shiny::runApp('App_1')
runApp('census-app')
setwd("~/census-app")
runApp()
counties <- readRDS("census-app/data/counties.rds")
print(head(counties))
counties <- readRDS("census-app/data/counties.rds")
print(head(counties))
counties <- readRDS("~/census-app/data/counties.rds")
View(counties)
counties <- readRDS("census-app/data/counties.rds")
head(counties)
install.packages(c("maps", "mapproj"))
setwd("C:/Users/markm/OneDrive/Documents")
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
percent_map(counties$white, "blue", "% White")
percent_map(counties$white, "darkgreen", "% White")
runApp('census-app')
install.packages("quantmod")
runApp("stockVis")
runApp('stockVis')
# Define server logic ----
server <- function(input, output) {
output$plot1 <- renderPlot( {
# ˆˆˆˆˆ Label from ui.R
mcycle2 <- subset(mcycle, times>=input$range[1] & times<=input$range[2])
# Label from ui.R ˆˆˆˆˆ ˆˆˆˆˆ
qplot(times, accel, data=mcycle2, xlim=range(mcycle$times),
ylim=range(mcycle$accel)) + geom_smooth(method="lm")
} )
output$text1 <- renderPrint( {
# ˆˆˆˆˆ Label from ui.R
mcycle2 <- subset(mcycle, times>=input$range[1] & times<=input$range[2])
# Label from ui.R ˆˆˆˆˆ ˆˆˆˆˆ
summary(mcycle2)
} )
output$table1 <- renderDataTable( {
# ˆˆˆˆˆ Label from ui.R
subset(mcycle, times>=input$range[1] & times<=input$range[2])
# Label from ui.R ˆˆˆˆˆ ˆˆˆˆˆ
} )
output$download1 <- downloadHandler(
# ˆˆˆˆˆˆˆˆˆ Label from ui.R
filename = "mcycle-subset.csv", # Filename shown to user in browser
content = function(file) { # Function to generate the download file
mcycle2 <- subset(mcycle, times>=input$range[1] & times<=input$range[2])
# Label from ui.R ˆˆˆˆˆ ˆˆˆˆˆ
write.csv(mcycle2, file, row.names=FALSE)
}
)
}
# Define UI ----
ui <- fluidPage(
titlePanel("Subsetting the motorcycle data"),
sidebarLayout(
sidebarPanel(
sliderInput("range", "Subset range", min=0, max=60, value=c(0,60)),
# ˆˆˆˆˆ Label used in server.R when querying slider
downloadButton("download1", "Download subset", icon="download")
# ˆˆˆˆˆˆˆˆˆˆˆ Label used in server.R for download
),
mainPanel(
plotOutput("plot1"),
# ˆˆˆˆˆ Label used in server.R when updating plot
verbatimTextOutput("text1"),
# ˆˆˆˆˆ Label used in server.R when updating output
dataTableOutput("table1")
# ˆˆˆˆˆˆ Label used in server.R when updating table
)
library(shiny)
library(ggplot2)
library(MASS)
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel("Subsetting the motorcycle data"),
sidebarLayout(
sidebarPanel(
sliderInput("range", "Subset range", min=0, max=60, value=c(0,60)),
# ˆˆˆˆˆ Label used in server.R when querying slider
downloadButton("download1", "Download subset", icon="download")
# ˆˆˆˆˆˆˆˆˆˆˆ Label used in server.R for download
),
mainPanel(
plotOutput("plot1"),
# ˆˆˆˆˆ Label used in server.R when updating plot
verbatimTextOutput("text1"),
# ˆˆˆˆˆ Label used in server.R when updating output
dataTableOutput("table1")
# ˆˆˆˆˆˆ Label used in server.R when updating table
)
# Define server logic ----
server <- function(input, output) {
output$plot1 <- renderPlot( {
# ˆˆˆˆˆ Label from ui.R
mcycle2 <- subset(mcycle, times>=input$range[1] & times<=input$range[2])
# Label from ui.R ˆˆˆˆˆ ˆˆˆˆˆ
qplot(times, accel, data=mcycle2, xlim=range(mcycle$times),
ylim=range(mcycle$accel)) + geom_smooth(method="lm")
} )
output$text1 <- renderPrint( {
# ˆˆˆˆˆ Label from ui.R
mcycle2 <- subset(mcycle, times>=input$range[1] & times<=input$range[2])
# Label from ui.R ˆˆˆˆˆ ˆˆˆˆˆ
summary(mcycle2)
} )
output$table1 <- renderDataTable( {
# ˆˆˆˆˆ Label from ui.R
subset(mcycle, times>=input$range[1] & times<=input$range[2])
# Label from ui.R ˆˆˆˆˆ ˆˆˆˆˆ
} )
output$download1 <- downloadHandler(
# ˆˆˆˆˆˆˆˆˆ Label from ui.R
filename = "mcycle-subset.csv", # Filename shown to user in browser
content = function(file) { # Function to generate the download file
mcycle2 <- subset(mcycle, times>=input$range[1] & times<=input$range[2])
# Label from ui.R ˆˆˆˆˆ ˆˆˆˆˆ
write.csv(mcycle2, file, row.names=FALSE)
}
)
}
# Run the app ----
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Subsetting the motorcycle data"),
sidebarLayout(
sidebarPanel(
sliderInput("range", "Subset range", min=0, max=60, value=c(0,60)),
# ˆˆˆˆˆ Label used in server.R when querying slider
downloadButton("download1", "Download subset", icon="download")
# ˆˆˆˆˆˆˆˆˆˆˆ Label used in server.R for download
),
mainPanel(
plotOutput("plot1"),
# ˆˆˆˆˆ Label used in server.R when updating plot
verbatimTextOutput("text1"),
# ˆˆˆˆˆ Label used in server.R when updating output
dataTableOutput("table1")
# ˆˆˆˆˆˆ Label used in server.R when updating table
)
```{r}
x <- rnorm(100)
summary(x)
hist(x)
x <- rnorm(100)
summary(x)
hist(x)
x <- rnorm(1)
Let's draw a single random number x.
```{r}
x <- rnorm(1)
```
The random number x is `r x`.
x <- rnorm(1)
x <- rnorm(100)
summary(x)
hist(x)
x <- rnorm(1)
x <- rnorm(100)
summary(x)
hist(x)
x <- rnorm(1)
Let's draw a single random number x.
```{r}
x <- rnorm(1)
```
The random number x is `r x`.
x <- rnorm(1)
setwd("C:/Users/markm/OneDrive/Documents/Documents/MSc Data Analytics/Modules/R programming/R-Project/project_RData_files")
load("~/Documents/MSc Data Analytics/Modules/R programming/R-Project/project_RData_files/sites.RData")
View(sites)
sites <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_4.csv")
library(tidyverse)
sites <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_4.csv")
site_4 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_4.csv")
View(site_4)
save(site_4, file = "site_4.RData")
site_79 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_79.csv")
save(site_79, file = "site_79.RData")
site_161 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_161.csv")
save(site_161, file = "site_161.RData")
site_235 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_235.csv")
save(site_235, file = "site_235.RData")
site_315 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_315.csv")
save(site_315, file = "site_315.RData")
site_384 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_384.csv")
save(site_384, file = "site_384.RData")
site_409 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_409.csv")
save(site_409, file = "site_409.RData")
site_613 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_613.csv")
save(site_613, file = "site_613.RData")
library(tidyverse)
site_643 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_643.csv")
save(site_643, file = "site_643.RData")
site_708 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_708.csv")
save(site_708, file = "site_708.RData")
site_709 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_709.csv")
save(site_709, file = "site_709.RData")
site_842 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_842.csv")
save(site_842, file = "site_842.RData")
site_971 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_971.csv")
save(site_971, file = "site_971.RData")
site_1135 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_1135.csv")
save(site_1135, file = "site_1135.RData")
site_908 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_908.csv")
save(site_908, file = "site_908.RData")
site_1144 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_1144.csv")
save(site_1144, file = "site_1144.RData")
site_1226 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_1226.csv")
save(site_1226, file = "site_1226.RData")
site_1302 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_1302.csv")
save(site_1302, file = "site_1302.RData")
site_1450 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_1450.csv")
save(site_1450, file = "site_1450.RData")
site_1090 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_1090.csv")
save(site_1090, file = "site_1450.RData")
site_1090 <- read_csv("C:\\Users\\markm\\OneDrive\\Documents\\Documents\\MSc Data Analytics\\Modules\\R programming\\R-Project\\project_csv_files\\Site_1090.csv")
save(site_1090, file = "site_1450.RData")
save(site_1090, file = "site_1090.RData")
View(site_1450)
View(site_1090)
View(site_1450)
